#Juego Gato vs Raton 

import sys

# Definici√≥n de s√≠mbolos visuales para el juego
gato = "üê±"
raton = "üê≠"
vacio = "‚¨ú"
obstaculo = "üü•"

# N√∫mero m√°ximo de turnos antes de que termine el juego
limite_turnos = 20

# Diccionario que mapea teclas a movimientos (solo 4 direcciones)
movimientos_permitidos = {
    'w': (-1, 0),   # Mover hacia arriba (disminuye fila)
    's': (1, 0),    # Mover hacia abajo (aumenta fila)
    'a': (0, -1),   # Mover hacia izquierda (disminuye columna)
    'd': (0, 1),    # Mover hacia derecha (aumenta columna)
}

def crear_tablero_vacio(numero_filas, numero_columnas):
    """
    Crea un tablero vac√≠o lleno de celdas vac√≠as
    Par√°metros:
        numero_filas: cantidad de filas del tablero
        numero_columnas: cantidad de columnas del tablero
    Retorna: matriz bidimensional representando el tablero
    """
    return [[vacio for _ in range(numero_columnas)] for _ in range(numero_filas)]

def mostrar_tablero(tablero_juego):
    """
    Imprime el tablero en la consola de manera visual
    Par√°metros:
        tablero_juego: matriz que representa el estado actual del tablero
    """
    for fila_actual in tablero_juego:
        print(" ".join(fila_actual))  # Une los elementos de cada fila con espacios
    print()  # L√≠nea en blanco para separar turnos

def es_posicion_valida(posicion_a_verificar, total_filas, total_columnas):
    """
    Verifica si una posici√≥n est√° dentro de los l√≠mites del tablero
    Par√°metros:
        posicion_a_verificar: tupla (fila, columna) a verificar
        total_filas: n√∫mero total de filas del tablero
        total_columnas: n√∫mero total de columnas del tablero
    Retorna: True si la posici√≥n es v√°lida, False en caso contrario
    """
    fila, columna = posicion_a_verificar
    return 0 <= fila < total_filas and 0 <= columna < total_columnas

def calcular_nueva_posicion(posicion_actual, tecla_presionada, total_filas, total_columnas):
    """
    Calcula la nueva posici√≥n despu√©s de un movimiento
    Par√°metros:
        posicion_actual: tupla (fila, columna) de la posici√≥n actual
        tecla_presionada: tecla que indica la direcci√≥n del movimiento
        total_filas: n√∫mero total de filas del tablero
        total_columnas: n√∫mero total de columnas del tablero
    Retorna: nueva posici√≥n si es v√°lida, posici√≥n actual si no es v√°lida
    """
    # Obtiene el cambio en fila y columna seg√∫n la tecla presionada
    cambio_fila, cambio_columna = movimientos_permitidos.get(tecla_presionada, (0, 0))
    
    # Calcula la nueva posici√≥n sumando los cambios
    nueva_posicion = (posicion_actual[0] + cambio_fila, posicion_actual[1] + cambio_columna)
    
    # Retorna la nueva posici√≥n si es v√°lida, sino mantiene la posici√≥n actual
    return nueva_posicion if es_posicion_valida(nueva_posicion, total_filas, total_columnas) else posicion_actual

def obtener_movimientos_posibles(posicion_personaje, tablero_juego):
    """
    Obtiene todas las posiciones v√°lidas a las que se puede mover un personaje
    Par√°metros:
        posicion_personaje: tupla (fila, columna) de la posici√≥n actual del personaje
        tablero_juego: matriz que representa el estado actual del tablero
    Retorna: lista de tuplas con todas las posiciones v√°lidas de movimiento
    """
    total_filas, total_columnas = len(tablero_juego), len(tablero_juego[0])
    movimientos_validos = []
    
    # Recorre todas las direcciones posibles
    for cambio_fila, cambio_columna in movimientos_permitidos.values():
        nueva_posicion = (posicion_personaje[0] + cambio_fila, posicion_personaje[1] + cambio_columna)
        
        # Verifica si la nueva posici√≥n es v√°lida y no es un obst√°culo
        if (es_posicion_valida(nueva_posicion, total_filas, total_columnas) and 
            tablero_juego[nueva_posicion[0]][nueva_posicion[1]] != obstaculo):
            movimientos_validos.append(nueva_posicion)
    
    return movimientos_validos

def evaluar_situacion_juego(posicion_raton, posicion_gato, numero_turno, limite_turnos):
    """
    Eval√∫a qu√© tan buena o mala es la situaci√≥n actual del juego desde la perspectiva del rat√≥n
    Par√°metros:
        posicion_raton: tupla (fila, columna) de la posici√≥n del rat√≥n
        posicion_gato: tupla (fila, columna) de la posici√≥n del gato
        numero_turno: turno actual del juego
        limite_turnos: n√∫mero m√°ximo de turnos permitidos
    Retorna: puntuaci√≥n num√©rica (positiva=buena para rat√≥n, negativa=buena para gato)
    """
    # Si el gato atrap√≥ al rat√≥n (misma posici√≥n), el rat√≥n pierde
    if posicion_raton == posicion_gato:
        return -100
    
    # Si se alcanz√≥ el l√≠mite de turnos, el rat√≥n sobrevivi√≥ y gana
    if numero_turno >= limite_turnos:
        return 50
    
    # Calcula distancia Manhattan entre gato y rat√≥n (mientras m√°s lejos, mejor para el rat√≥n)
    distancia_manhattan = abs(posicion_raton[0] - posicion_gato[0]) + abs(posicion_raton[1] - posicion_gato[1])
    return -distancia_manhattan  # Negativo porque queremos maximizar la distancia

def algoritmo_minimax(tablero_juego, posicion_raton, posicion_gato, numero_turno, limite_turnos, profundidad_busqueda, es_turno_raton):
    """
    Algoritmo minimax para determinar el mejor movimiento
    Par√°metros:
        tablero_juego: matriz que representa el estado actual del tablero
        posicion_raton: tupla (fila, columna) de la posici√≥n del rat√≥n
        posicion_gato: tupla (fila, columna) de la posici√≥n del gato
        numero_turno: turno actual del juego
        limite_turnos: n√∫mero m√°ximo de turnos permitidos
        profundidad_busqueda: qu√© tan profundo buscar en el √°rbol de posibilidades
        es_turno_raton: True si es turno del rat√≥n, False si es turno del gato
    Retorna: tupla (puntuaci√≥n, mejor_movimiento)
    """
    # Condiciones de parada: profundidad 0, juego terminado
    if (profundidad_busqueda == 0 or posicion_raton == posicion_gato or numero_turno >= limite_turnos):
        return evaluar_situacion_juego(posicion_raton, posicion_gato, numero_turno, limite_turnos), None

    if es_turno_raton:
        # Turno del rat√≥n: busca maximizar la puntuaci√≥n
        mejor_puntuacion = -float('inf')  # Inicializa con el peor valor posible
        mejor_movimiento = None
        
        # Eval√∫a todos los movimientos posibles del rat√≥n
        for movimiento_posible in obtener_movimientos_posibles(posicion_raton, tablero_juego):
            puntuacion_movimiento, _ = algoritmo_minimax(
                tablero_juego, movimiento_posible, posicion_gato, 
                numero_turno + 1, limite_turnos, profundidad_busqueda - 1, False
            )
            
            # Si encuentra un movimiento mejor, lo guarda
            if puntuacion_movimiento > mejor_puntuacion:
                mejor_puntuacion = puntuacion_movimiento
                mejor_movimiento = movimiento_posible
        
        return mejor_puntuacion, mejor_movimiento
    else:
        # Turno del gato: busca minimizar la puntuaci√≥n (malo para el rat√≥n)
        peor_puntuacion = float('inf')  # Inicializa con el mejor valor posible para el rat√≥n
        mejor_movimiento_gato = None
        
        # Eval√∫a todos los movimientos posibles del gato
        for movimiento_posible in obtener_movimientos_posibles(posicion_gato, tablero_juego):
            puntuacion_movimiento, _ = algoritmo_minimax(
                tablero_juego, posicion_raton, movimiento_posible, 
                numero_turno + 1, limite_turnos, profundidad_busqueda - 1, True
            )
            
            # Si encuentra un movimiento que sea peor para el rat√≥n, lo guarda
            if puntuacion_movimiento < peor_puntuacion:
                peor_puntuacion = puntuacion_movimiento
                mejor_movimiento_gato = movimiento_posible
        
        return peor_puntuacion, mejor_movimiento_gato

def iniciar_juego():
    """
    Funci√≥n principal que maneja todo el flujo del juego
    """
    # Configuraci√≥n inicial del juego
    modo_juego = input("¬øQuer√©s jugar contra la Computadora (c) o contra otro Jugador (j)? ").lower()
    numero_filas = int(input("¬øCu√°ntas filas quer√©s que tenga el tablero? (m√≠nimo 5): "))
    numero_columnas = int(input("¬øCu√°ntas columnas quer√©s que tenga el tablero? (m√≠nimo 5): "))

    # Creaci√≥n del tablero y posicionamiento inicial
    tablero_principal = crear_tablero_vacio(numero_filas, numero_columnas)
    posicion_gato = (0, 0)  # Gato empieza en esquina superior izquierda
    posicion_raton = (numero_filas - 1, numero_columnas - 1)  # Rat√≥n en esquina inferior derecha

    # Coloca los personajes en el tablero
    tablero_principal[posicion_gato[0]][posicion_gato[1]] = gato
    tablero_principal[posicion_raton[0]][posicion_raton[1]] = raton

    # Coloca obst√°culos verticales fijos en el tablero
    for indice_fila in range(1, numero_filas - 1):
        tablero_principal[indice_fila][numero_columnas // 3] = obstaculo
        tablero_principal[indice_fila][2 * numero_columnas // 3] = obstaculo

    # Inicializa el contador de turnos
    contador_turnos = 0

    # Configuraci√≥n de jugadores seg√∫n el modo de juego
    if modo_juego == 'c':
        # Modo contra computadora
        eleccion_jugador = input("¬øQuer√©s ser el Gato (g) o el Rat√≥n (r)? ").lower()
        controlador_gato = "jugador" if eleccion_jugador == 'g' else "ia"
        controlador_raton = "jugador" if eleccion_jugador == 'r' else "ia"
    else:
        # Modo jugador vs jugador
        eleccion_jugador1 = input("Jugador 1, ¬øquer√©s ser el Gato (g) o el Rat√≥n (r)? ").lower()
        if eleccion_jugador1 == 'g':
            controlador_gato = "jugador1"
            controlador_raton = "jugador2"
        else:
            controlador_gato = "jugador2"
            controlador_raton = "jugador1"

    # Bucle principal del juego
    while True:
        mostrar_tablero(tablero_principal)  # Muestra el estado actual del tablero

        # Determina de qui√©n es el turno (turnos pares=rat√≥n, impares=gato)
        quien_juega = controlador_raton if contador_turnos % 2 == 0 else controlador_gato
        es_turno_del_raton = contador_turnos % 2 == 0

        # Obtiene la posici√≥n actual del personaje que debe moverse
        posicion_actual = posicion_raton if es_turno_del_raton else posicion_gato

        # Procesa el movimiento seg√∫n qui√©n controla el personaje
        if quien_juega.startswith("jugador"):
            # Movimiento controlado por jugador humano
            nombre_personaje = 'Rat√≥n üê≠' if es_turno_del_raton else 'Gato üê±'
            print(f"Turno de {quien_juega} ({nombre_personaje})")
            tecla_movimiento = input("Movimiento (w=arriba/s=abajo/a=izquierda/d=derecha): ").lower()
            nueva_posicion = calcular_nueva_posicion(posicion_actual, tecla_movimiento, numero_filas, numero_columnas)
        else:
            # Movimiento controlado por IA
            nombre_personaje = 'Rat√≥n üê≠' if es_turno_del_raton else 'Gato üê±'
            print(f"Turno de la IA ({nombre_personaje})")
            # Usa minimax con profundidad 4 para calcular el mejor movimiento
            _, nueva_posicion = algoritmo_minimax(
                tablero_principal, posicion_raton, posicion_gato, 
                contador_turnos, limite_turnos, 4, es_turno_del_raton
            )

        # Actualiza la posici√≥n del personaje en el tablero
        if es_turno_del_raton:
            # Verifica si el rat√≥n intenta moverse a un obst√°culo
            if tablero_principal[nueva_posicion[0]][nueva_posicion[1]] == obstaculo:
                nueva_posicion = posicion_raton  # Mantiene la posici√≥n actual
            
            # Actualiza la posici√≥n del rat√≥n en el tablero
            tablero_principal[posicion_raton[0]][posicion_raton[1]] = vacio
            posicion_raton = nueva_posicion
            tablero_principal[posicion_raton[0]][posicion_raton[1]] = raton
        else:
            # Verifica si el gato intenta moverse a un obst√°culo
            if tablero_principal[nueva_posicion[0]][nueva_posicion[1]] == obstaculo:
                nueva_posicion = posicion_gato  # Mantiene la posici√≥n actual
            
            # Actualiza la posici√≥n del gato en el tablero
            tablero_principal[posicion_gato[0]][posicion_gato[1]] = vacio
            posicion_gato = nueva_posicion
            tablero_principal[posicion_gato[0]][posicion_gato[1]] = gato

        # Incrementa el contador de turnos
        contador_turnos += 1

        # Verifica las condiciones de fin de juego
        if posicion_raton == posicion_gato:
            # El gato atrap√≥ al rat√≥n
            mostrar_tablero(tablero_principal)
            print("¬°El gato atrap√≥ al rat√≥n! üê±üê≠")
            break
        
        if contador_turnos >= limite_turnos:
            # Se alcanz√≥ el l√≠mite de turnos, el rat√≥n sobrevivi√≥
            mostrar_tablero(tablero_principal)
            print("¬°El rat√≥n sobrevivi√≥ todos los turnos! üê≠üéâ")
            break

# Inicia el juego
iniciar_juego()
